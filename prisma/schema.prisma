generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
  shadowDatabaseUrl = env("SHADOW_POSTGRES_URL")
}

model User {
  id                     String    @id
  email                  String    @unique
  name                   String?
  isAdmin                Boolean   @default(false)
  isNewsletterSubscriber Boolean   @default(false)
  createdAt              DateTime  @default(now())
  unsubscribeToken       String?   @unique
  apiKeys                ApiKey[]
  inquiries              Inquiry[]
}

model ApiKey {
  id         String    @id @default(cuid())
  name       String
  hashedKey  String    @unique
  keyPreview String
  userId     String
  scopes     String[]  @default(["blog:read", "blog:write"])
  active     Boolean   @default(true)
  lastUsedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([hashedKey])
  @@index([userId])
}

model Inquiry {
  id            String           @id @default(cuid())
  name          String
  email         String
  serviceType   String
  message       String
  createdAt     DateTime         @default(now())
  status        InquiryStatus    @default(PENDING)
  updatedAt     DateTime         @updatedAt
  userId        String?
  budgets       Budget[]
  subscriptions Subscription[]
  user          User?            @relation(fields: [userId], references: [id])
  messages      InquiryMessage[]

  @@index([status])
  @@index([email])
  @@index([createdAt])
}

model InquiryMessage {
  id          String   @id @default(cuid())
  inquiryId   String
  message     String
  isFromAdmin Boolean  @default(false)
  authorId    String?
  createdAt   DateTime @default(now())
  inquiry     Inquiry  @relation(fields: [inquiryId], references: [id], onDelete: Cascade)

  @@index([inquiryId])
  @@index([createdAt])
}

model Newsletter {
  id          String    @id @default(cuid())
  subject     String
  content     String
  previewText String?
  isDraft     Boolean   @default(true)
  sentAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model BlogAuthor {
  id        String     @id @default(cuid())
  name      String
  avatar    String?
  title     String
  bio       String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  blogPosts BlogPost[]
}

model BlogCategory {
  id        String             @id @default(cuid())
  name      String             @unique
  slug      String             @unique
  createdAt DateTime           @default(now())
  blogPosts BlogPostCategory[]
}

model BlogPost {
  id          String             @id @default(cuid())
  slug        String             @unique
  title       String
  excerpt     String
  content     String
  coverImage  String
  publishDate DateTime
  readTime    Int
  featured    Boolean            @default(false)
  tintColor   String?
  published   Boolean            @default(true)
  authorId    String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  author      BlogAuthor         @relation(fields: [authorId], references: [id])
  categories  BlogPostCategory[]

  @@index([published])
  @@index([publishDate])
  @@index([slug])
}

model BlogPostCategory {
  blogPostId String
  categoryId String
  blogPost   BlogPost     @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  category   BlogCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([blogPostId, categoryId])
}

model ServicePricing {
  id                String             @id @default(cuid())
  serviceType       String
  name              String
  description       String
  basePrice         Decimal            @db.Decimal(10, 2)
  currency          String             @default("USD")
  billingType       String
  features          Json
  isActive          Boolean            @default(true)
  customizable      Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  budgetItems       BudgetItem[]
  subscriptionItems SubscriptionItem[]

  @@index([serviceType])
  @@index([isActive])
}

model Budget {
  id          String       @id @default(cuid())
  inquiryId   String
  title       String
  description String?
  totalAmount Decimal      @db.Decimal(10, 2)
  currency    String       @default("USD")
  status      BudgetStatus @default(DRAFT)
  validUntil  DateTime?
  adminNotes  String?
  clientNotes String?
  createdById String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  inquiry     Inquiry      @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  items       BudgetItem[]
  payments    Payment[]

  @@index([inquiryId])
  @@index([status])
  @@index([createdAt])
}

model Subscription {
  id              String                @id @default(cuid())
  inquiryId       String
  title           String
  description     String?
  monthlyAmount   Decimal               @db.Decimal(10, 2)
  currency        String                @default("USD")
  status          SubscriptionStatus    @default(DRAFT)
  validUntil      DateTime?
  adminNotes      String?
  clientNotes     String?
  createdById     String
  billingInterval String                @default("month") // month, year
  trialPeriodDays Int?                  @default(0)
  stripeProductId String?
  stripePriceId   String?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  inquiry         Inquiry               @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  items           SubscriptionItem[]
  subscriptions   SubscriptionPayment[]

  @@index([inquiryId])
  @@index([status])
  @@index([createdAt])
}

model BudgetItem {
  id               String          @id @default(cuid())
  budgetId         String
  servicePricingId String?
  name             String
  description      String?
  quantity         Int             @default(1)
  unitPrice        Decimal         @db.Decimal(10, 2)
  totalPrice       Decimal         @db.Decimal(10, 2)
  isCustom         Boolean         @default(false)
  category         String?
  createdAt        DateTime        @default(now())
  budget           Budget          @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  servicePricing   ServicePricing? @relation(fields: [servicePricingId], references: [id])

  @@index([budgetId])
}

model SubscriptionItem {
  id               String          @id @default(cuid())
  subscriptionId   String
  servicePricingId String?
  name             String
  description      String?
  quantity         Int             @default(1)
  unitPrice        Decimal         @db.Decimal(10, 2)
  totalPrice       Decimal         @db.Decimal(10, 2)
  isCustom         Boolean         @default(false)
  category         String?
  createdAt        DateTime        @default(now())
  subscription     Subscription    @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  servicePricing   ServicePricing? @relation(fields: [servicePricingId], references: [id])

  @@index([subscriptionId])
}

model Payment {
  id                 String        @id @default(cuid())
  budgetId           String
  stripePaymentId    String?       @unique
  stripeSessionId    String?       @unique
  amount             Decimal       @db.Decimal(10, 2)
  currency           String        @default("USD")
  status             PaymentStatus @default(PENDING)
  paymentMethod      String?
  paidAt             DateTime?
  refundedAt         DateTime?
  failedAt           DateTime?
  failureReason      String?
  stripeClientSecret String?
  metadata           Json?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  budget             Budget        @relation(fields: [budgetId], references: [id], onDelete: Cascade)

  @@index([budgetId])
  @@index([status])
  @@index([stripePaymentId])
  @@index([stripeSessionId])
}

model SubscriptionPayment {
  id                   String                    @id @default(cuid())
  subscriptionId       String
  stripeSubscriptionId String?                   @unique
  stripeCustomerId     String?
  amount               Decimal                   @db.Decimal(10, 2)
  currency             String                    @default("USD")
  status               SubscriptionPaymentStatus @default(PENDING)
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  nextBillingDate      DateTime?
  canceledAt           DateTime?
  endedAt              DateTime?
  trialStart           DateTime?
  trialEnd             DateTime?
  failureReason        String?
  metadata             Json?
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  subscription         Subscription              @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([status])
  @@index([stripeSubscriptionId])
  @@index([stripeCustomerId])
}

enum InquiryStatus {
  PENDING
  IN_PROGRESS
  PAID
  RESOLVED
  CLOSED
}

enum BudgetStatus {
  DRAFT
  SENT
  APPROVED
  REJECTED
  EXPIRED
  PAID
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
}

enum SubscriptionStatus {
  DRAFT
  SENT
  APPROVED
  REJECTED
  EXPIRED
  ACTIVE
  CANCELLED
  PAST_DUE
  COMPLETED
}

enum SubscriptionPaymentStatus {
  PENDING
  ACTIVE
  PAST_DUE
  CANCELLED
  UNPAID
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  PAUSED
}
